期中考問答題:

費氏數列:遞迴方法 vs iterative

(1)請使用靜態遞迴方法算出費氏數列。
 public class MainClass {
    public static void main(String[] args) {
        for (int counter = 0; counter <= 10; counter++){
            System.out.printf("Fibonacci of %d is: %d\n", counter, fibonacci(counter));
        }
    }
 
    public static long fibonacci(long number) {
        if ((number == 0) || (number == 1))
            return number;
        else
            return fibonacci(number - 1) + fibonacci(number - 2);
    }
}

Fibonacci of 0 is: 0
Fibonacci of 1 is: 1
Fibonacci of 2 is: 1
Fibonacci of 3 is: 2
Fibonacci of 4 is: 3
Fibonacci of 5 is: 5
Fibonacci of 6 is: 8
Fibonacci of 7 is: 13
Fibonacci of 8 is: 21
Fibonacci of 9 is: 34
Fibonacci of 10 is: 55

(2)請使用 iterative方法算出費氏數列。
public class Interation {
	public void InteratArr(int alength,int arrZero,int arrOne) {
		int[] arr = new int[alength];
		arr[0] = arrZero;
		arr[1] = arrOne;
		int sum = alength-2;//需要累加的次数
		for(int i=1;i<=sum;i++) {
			arr[i+1] = arr[i] + arr[i-1];
		}
		for(int i=0;i<arr.length;i++) {
			System.out.print(arr[i]+" ");
		}
	}
	public static void main(String[] args) {
		Interation test = new Interation();
		test.InteratArr(5, 0, 1);
	}
}

0 1 1 2 3 

傳值呼叫(call by value)
虛引數為基本資料型別，基本資料型別的變數存放在Stack堆疊儲存空間，呼叫敘述的實引數與被呼叫方法的虛引數是分別占用不同記憶體
public class CallByVal {
	public static void main(String[] args) {
		int a = 10, b = 15;
		System.out.println(" 傳值呼叫前\ta=" + a + "\tb=" + b );
		byVal(a, b);
		System.out.println(" 傳值呼叫後\ta=" + a + "\tb=" + b );
	}

	static void byVal(int x, int y) {
		int t; //以變數t作為暫存區，將引數互換
		t = x;
		x = y;
		y = t;
		System.out.println(" 傳值呼叫中\tx=" + x + "\ty=" + y );
	}
}

 傳值呼叫前	a=10	b=15
 傳值呼叫中	x=15	y=10
 傳值呼叫後	a=10	b=15
 
參考呼叫(call by reference)
虛引數為參考資料型別，呼叫敘述的實引數與被呼叫方法的的虛引數是占用同一記憶體
class Obj {
	int a, b;

	Obj() {
		a = 10;
		b = 15;
	}
}

public class CallByRef {
	public static void main(String[] args) {
		Obj obj = new Obj();
		System.out.println(" 參考呼叫前\t a = " + obj.a + "\tb = " + obj.b);
		byRef(obj);
		System.out.println(" 參考呼叫後\t a = " + obj.a + "\tb = " + obj.b);
	}

	static void byRef(Obj p) {
		int t;
		t = p.a;
		p.a = p.b;
		p.b = t;
	}
}

 參考呼叫前	 a = 10	b = 15
 參考呼叫後	 a = 15	b = 10

方法多載
同一個類別中，允許方法使用相同的名稱，必須是資料型別不同、個數或順序不同
void methed(){}
int methed(){} //不能多載:傳回值不同但引數個數相同
void methed(int a){} //成功多載:比第1行的方法多一個引數
void methed(int b){} //不能多載:引數名稱不同，但和第3行的型別和個數相同
void methed(String s){} //成功多載:第3行引數個數相同但型別不同

public class AddNum {
	public static void main(String[] args) {
		int total1, x=17, y=28;
		double total2, i=3.8, j=22.7, k=15.1;
		total1 = add(x, y);
		total2 = add(i, j, k);
		System.out.printf("%d%n",total1);
		System.out.printf("%f%n",total2);
	}
	static int add(int a, int b) {
		return a + b; // 傳回兩個整數相加的結果
	}
	static double add(double a, double b, double c) {
		return a + b + c; // 傳回三個倍精確度相加的結果
	}
}

45
41.600000
